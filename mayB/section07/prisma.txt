prisma
기존 orm은 class를 사용해 데이터 정의
단순 노동이 줄어들어 개발에 집중 가능
실수를 줄일 수 있는 단단한 제약조건
typescript와의 환상적인 호흡

prisma로 DB 연동하기
mysql:{유저이름}:{DB pw}@{DB_URL}:{PORT}/{DB_NAME}

프리스마 명령어
yarn add prisma 
  설치
yarn prisma init 
  현재 프로젝트에 프리즈마를 사용하는데 필요한 파일 생성 / prisma/schema.prisma, prisma/.env
yarn prisma generate  
  schema.prisma를 기반으로 Prisma client 등의 자원 생성 / schema.prisma 수정 후 반드시 실행
yarn prisma migrate dev
  schema.prisma 파일의 내용을 기반으로 DB업데이트
  migrate를 진행하면 DB에 _prisma_migrations 테이블이 생성/수정됨
  git처럼 DB 수정 내역을 관리 가능
yarn prisma migrate dev --create-only
  실제 DB에 반영하지 않고 Migration 파일 반영 가능
yarn prisma db pull
  DB 수정 내용을 불러오는 기능 / 맨 처음 세팅할 때, 이미 만들어진 DB일 때 사용
yarn prisma db push
  migration 이력 없이 DB에 수정사항 반영 / 웬만하면 yarn prisma migrate dev 사용 (이력이 안남으니)

query
- GET
  database.{model}.findUnique() / 유니크한 값을 통해 데이터를 찾음 (PK, 유니크 key)
                   findFirst({where : { 조건 }}) / 조건에 맞는 데이터 중 가장 최근 데이터를 찾음
                   findMany({where : { 조건 }}) / 조건에 맞는 데이터를 모두 찾음
  where 조건에 맞는 데이터를 불러옴 / 병렬로 입력 시 모두 해당하는 데이터 가져옴
  where - OR 배열 안의 조건을 하나라도 만족하는 데이터 찾음 
    where : { OR : [ {1조건 }, { 2조건 }]}
  orderBy 해당 컬럼 기준으로 desc(내림) || asc(오름)차순으로 불러옴
  skip/take / skip한 개수만큼 제외하고 take한 만큼 가져오기
    ex) findMany({ skip:2, take:5 })

- CREATE
  database.{model}.create() // 데이터를 생성함
    create({data : { id....}})

- UPDATE
  database.{model}.update() // 데이터를 수정함
    update({where :{ id }, data:{ 수정할 내용 }})

- DELETE
  database.{model}.delete() // 데이터를 삭제함


관계형 CRUD
- GET
  database.{model}.findFirst / findMany / findUnique(X)
  - every / some / none  1 : N 관계 중 1인 대상에서 사용
  - include / include : { posts : true } posts 까지 포함해서 가져옴 / post 입장에서도 유저 정보 가져옴

- CREATE
  database.{model}.create() - connect / PK를 통해 대상을 연결함 => 기존에 있는 데이터의 id를 사용해야 함
                            - create / 데이터를 생성하면서 관계된 테이블의 데이터도 새로 생성함
                            - connectOrCreate / PK로 검색한 값이 있으면 connect 없으면 create
                            - createMany / 데이터를 생성하면서 배열로 들어간 대상의 데이터도 모두 생성

- UPDATE
  database.{model}.update() - delete / 조건에 맞는 데이터 삭제
                            - disconnect / 대상에 맞는 연결 데이터 해제
                            - upsert / 조건에 맞는 데이터가 있을 경우 Update / 없을 경우 create
